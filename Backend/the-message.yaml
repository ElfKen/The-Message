openapi: 3.0.3
info:
  title: The Message
  description: This is a Intro_
  version: 1.0.11
tags:
  - name: game
    description: Game component
  - name: player
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /game:
    get:
      tags:
        - game
      summary: Get the game status and info.
      description: Get the game status and info.
      operationId: getGame
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    post:
      tags:
        - game
      summary: Initial the game.
      description: Initial the game, operate the deck shuffle and deal the team card to the players.
      operationId: initGame
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Players don't be set up yet.
    delete:
      tags:
        - game
      summary: Clean up the game.
      description: Clean up the game.
      operationId: deleteGame
      parameters:
        - name: api_key
          in: header
          required: true
          description: Game accessable api key.
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid api key.
  /player:
    post:
      tags:
        - player
      summary: Set up the player data in the game.
      description: Set up the player data in the game and it will be operated before initial the game.
      operationId: setGamePlayer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input value of the player.
    get:
      tags:
        - player
      summary: Get all players info.
      description: Get players info.
      operationId: getPlayers
      parameters:
        - name: api_key
          in: header
          required: true
          description: Game accessable api key.
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid api key.
  /player/{playerId}:
    get:
      tags:
        - player
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: playerId
          in: path
          description: ID of player to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: player not found
    post:
      tags:
        - player
      summary: Updates a player data form data
      description: Updates a player data form data
      operationId: updatePetWithForm
      parameters:
        - name: api_key
          in: header
          required: true
          description: Game accessable api key.
          schema:
            type: string
        - name: playerId
          in: path
          description: ID of player to return
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - player
      summary: Deletes a player
      description: Delete a player
      operationId: deleteplayer
      parameters:
        - name: api_key
          in: header
          required: true
          description: Game accessable api key.
          schema:
            type: string
        - name: playerId
          in: path
          description: ID of player to return
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid pet value
  /player/{playerId}/draw:
    post:
      tags:
        - player
      summary: Player draw the mission card.
      description: Player draw the mission card.
      operationId: playerDraw
      parameters:
        - name: api_key
          in: header
          required: true
          description: Game accessable api key.
          schema:
            type: string
        - name: playerId
          in: path
          description: ID of player to return
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid api key.
  /player/{playerId}/show:
    post:
      tags:
        - player
      summary: Player draw the mission card.
      description: Player draw the mission card.
      operationId: playerShow
      parameters:
        - name: api_key
          in: header
          required: true
          description: Game accessable api key.
          schema:
            type: string
        - name: playerId
          in: path
          description: ID of player to return
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid api key.
  /player/{playerId}/obtainCard:
    post:
      tags:
        - player
      summary: Player obtain the mission card.
      description: Player obtain the mission card.
      operationId: playerObtainCard
      parameters:
        - name: api_key
          in: header
          required: true
          description: Game accessable api key.
          schema:
            type: string
        - name: playerId
          in: path
          description: ID of player to return
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid api key.
components:
  schemas:
    game:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
          example: 'xxxxxxxxxxxxxxx'
        players:
          type: string
          example: doggie
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
